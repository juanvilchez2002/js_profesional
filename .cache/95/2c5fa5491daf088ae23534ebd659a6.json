{"id":"ejercicios/prototype.html","dependencies":[{"name":"/mnt/c/Users/JUAN VILCHEZ/Desktop/Cursos Online/Arquitecto Front End/16. JS Profesional/js_profesional/package.json","includedInParent":true,"mtime":1617844737972}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Prototype</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go Back</a>\n    <p><em>Abre la consola</em></p>\n    <script>//--\n//un objeto comun y corriente\nvar zelda = {\n  name: 'Zelda'\n};\n\nzelda.saludar = function () {\n  console.log(\"Hola soy \".concat(this.name));\n};\n\nzelda.saludar();\nvar link = {\n  name: 'Link'\n};\n\nlink.saludar = function () {\n  console.log(\"Mi nombre es \".concat(this.name));\n};\n\nlink.saludar(); //--\n//un poco más eficiente\n\nfunction Hero(name) {\n  var hero = {\n    name: name\n  }; //construimos el metodo 'saludar'\n\n  hero.saludar = function () {\n    console.log(\"Hola, soy \".concat(this.name));\n  };\n\n  return hero;\n}\n\nvar zelda1 = Hero('Zelda 1'); //le pasamos el nombre como parametro\n\nzelda1.saludar(); //invocamos la función saludar\n\nvar link1 = Hero('Link 1'); //le pasamos el nombre como parametro\n\nlink1.saludar(); //invocamos la función saludar\n//--\n//haciendolo un poco mas eficiente\n\nvar heroMethods = {\n  //creamos un metodo\n  saludar: function saludar() {\n    console.log(\"Hola soy \".concat(this.name));\n  }\n};\n\nfunction Hero1(name) {\n  var hero = {\n    name: name\n  };\n  hero.saludar = heroMethods.saludar; //refereciamos el metodo 'saludar'\n\n  return hero;\n}\n\nvar zelda2 = Hero1('Zelda 2');\nzelda2.saludar();\nvar link2 = Hero1('Link 2');\nlink2.saludar(); //--\n//usando 'object.create' -> recibe un objeto y crea uno nuevo, y tendra todas las propiedades del objeto\n//definido\n//const nuevoObjeto = Object.create(objeto)\n\nvar heroMethods1 = {\n  saludar: function saludar() {\n    console.log(\"Soy un superheroe \".concat(this.name));\n  }\n};\n\nfunction Hero2(name) {\n  var hero = Object.create(heroMethods1);\n  hero.name = name;\n  return hero;\n}\n\nvar zelda3 = Hero2('Zelda 3');\nzelda3.saludar();\nvar link3 = Hero2('Link3');\nlink3.saludar(); //--\n//los métodos de hero dentro de 'Hero'\n//usando prototype\n\nfunction Hero3(name) {\n  var hero = Object.create(Hero3.prototype);\n  hero.name = name;\n  return hero;\n}\n\nHero3.prototype.saludar = function () {\n  console.log(\"Soy un resuperHeroe \".concat(this.name));\n};\n\nvar zelda4 = Hero3('Zelda 4');\nzelda4.saludar();\nvar link4 = Hero3('Link 4');\nlink4.saludar(); //--\n//'new' es un atajo, azucar sintactica, para llevar Hero.prototype al objeto\n//hereda todas las propiedades del prototype de otro objeto\n\nfunction Hero4(name) {\n  //usamos this\n  this.name = name;\n  return this; //aunque no es necesario\n}\n\nHero4.prototype.saludar = function () {\n  console.log(\"Soy un Nuevo resuperHeroe \".concat(this.name));\n};\n\nvar zelda5 = new Hero4('Zelda 5');\nzelda5.saludar();\nvar link5 = new Hero4('Link 5');\nlink5.saludar();</script>\n</body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"69e80954a4dc9b0c992a96c7085b78ab","cacheData":{"env":{}}}