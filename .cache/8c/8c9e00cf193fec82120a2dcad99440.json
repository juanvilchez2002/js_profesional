{"id":"ejercicios/closures.html","dependencies":[{"name":"/mnt/c/Users/JUAN VILCHEZ/Desktop/Cursos Online/Arquitecto Front End/16. JS Profesional/js_profesional/package.json","includedInParent":true,"mtime":1617585145333}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Closure - Ambito</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go Back</a>\n    <p><em>Abre la consola</em></p>\n    <script>//ejemplo de IIEF\n//Immediately-invoked function expressions\n//es una función que se llama de la siguiente manera\n//funcion inicial\n\n/*let color = 'green'\n function printColor(){\n    console.log(color);\n}\n printColor()*/\n//versión IIEF\n(function () {\n  //función scope\n  var color = 'green'; //color ya no esta en el scope global\n\n  function printColor() {\n    console.log(color);\n  }\n\n  printColor();\n})(); //ejemplo 1 de closure\n\n\nfunction creaFunciones() {\n  var nombre = 'Luis'; //'muestraNombre' es una función interna osea un closure\n\n  function muestraNombre() {\n    console.log(nombre);\n  } //returno la referencia de la función 'muestraNombre' y voy a recordar el estado de las\n  //variables al momento que sea invocado\n\n\n  return muestraNombre();\n} //creo una variable que contenga la función 'creaFunciones'\n//esta nueva variable 'miNuevaFuncion' se ha convertido en un closure\n\n\nvar miNuevaFuncion = creaFunciones(); //console.log(miNuevaFuncion());//llamamos a la función y vemos que se imprime el valor de 'nombre'\n//ejemplo 2 de closure\n//funciones que regresan funciones\n\nfunction makeColorPrint(color) {\n  var colorMessage = \"El Color es \".concat(color); //voy a retornar la referencia de esta función y voy a recordar la variable 'colorMessage'\n  //de la función 'makeColorPrint' y los argumentos cuando lo invocamos\n\n  return function () {\n    console.log(colorMessage);\n  };\n}\n\nvar greenColorPrinter = makeColorPrint('green');\nconsole.log(greenColorPrinter()); //ejemplo 3 de closure\n\nfunction makeCounter(n) {\n  var count = n; //esta variable es privada\n  //los closures, ademas de ser funciones tambien pueden ser un objeto\n  //este objeto va a recordar todas las variables definidas en el función scope\n\n  return {\n    increase: function increase() {\n      count = count + 1; //incrementa en 1\n    },\n    decrease: function decrease() {\n      count = count - 1; //decrementa en 1\n    },\n    getcount: function getcount() {\n      return count; //devuelve el valor\n    }\n  };\n}\n\nvar counter = makeCounter(7);\nconsole.log(counter.getcount());\ncounter.increase();\nconsole.log(counter.getcount());\ncounter.decrease();\ncounter.decrease();\nconsole.log(counter.getcount());</script>\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"eadbc816a275f6149819760d94b89e61","cacheData":{"env":{}}}