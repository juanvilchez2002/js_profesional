{"id":"ejercicios/proxy.html","dependencies":[{"name":"/mnt/c/Users/JUAN VILCHEZ/Desktop/Cursos Online/Arquitecto Front End/16. JS Profesional/js_profesional/package.json","includedInParent":true,"mtime":1617844737972}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Getters y Setters</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go Back</a>\n    <p><em>Abre la consola</em></p>\n    <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\n    <script>//'Leveshtain' => es un algoritmo que va a permitir encontrar la distancia entre dos cadenas\n//creamos nuestro objeto original o del objeto base\nvar target = {\n  red: 'Rojo',\n  green: 'Verde',\n  blue: 'Azul'\n}; //handler tambien es un objeto y puede tener varias funciones (funciones trampa)\n\nvar handler = {\n  get: function get(target, property) {\n    if (property in target) {\n      return target[property];\n    } //'get' recibe 2 cosas: el objeto target, que es nuestro objeto original\n    //y la propiedad que se esta tratanndo de leer\n\n\n    var suggestion = Object.keys(target).find(function (key) {\n      return Levenshtein.get(key, property) <= 3;\n    });\n\n    if (suggestion) {\n      console.log(\"\".concat(property, \" no se encontro, Quiso decir \").concat(suggestion));\n    } //return target[property]\n\n  }\n}; //al objeto proxy le pasamos el objeto original (target), y el objeto 'handler' que va a\n//definir el comprotamiento del objeto proxy\n\nvar proxy = new Proxy(target, handler);\nconsole.log(proxy);\nconsole.log(proxy.red);\nconsole.log(proxy.reeeed);</script>\n</body>\n</html>\n\n\n"},"sourceMaps":null,"error":null,"hash":"1150193f7bce6d84bd82dd133022d5f7","cacheData":{"env":{}}}